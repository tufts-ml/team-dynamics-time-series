import typing

import numpy as np
import seaborn as sns
from matplotlib import pyplot as plt

from dynagroup.types import NumpyArray3D


color_names = ["windows blue", "red", "amber", "faded green", "dusty purple", "orange"]
colors = sns.xkcd_palette(color_names)

# configs z_probs = sample_z_probs


def plot_entity_regime_changepoints_for_figure_eight_dataset(
    z_probs: NumpyArray3D,
    times_of_system_regime_changepoints: typing.List[int],
    which_changepoint_to_show: int,
    which_entity_regime_to_show: int,
):
    """
    Show the probabilities of entering into a new entity-level regime around the changepoint boundaries.
    for the dataset generated by generate.figure8.   Note that the code logic assumes that the the system-level
    regimes drive the entity-level regimes (at least for some locations in state space), as is true for the
    Figure 8 dataset.

    Arguments:
        z_probs: Array of shape (T,J,K).  See corresponding attribute from the Sample class.
        times_of_system_regime_changepoints: A list of length C,
            giving timesteps where the system regime transitions into a new value.
       system_regime_ids_before_changepoints:  A list of length C+1, which
            gives the regime ID before changepoint. The final entry persists without any changepoint
            other than the end of the series.  [UPDATE_NOT_NEEDED]
        which_changepoint_to_show: Which changepoint to analyze.  One-indexed.
        which_entity_regime_to_show: One indexed.
    """

    if which_changepoint_to_show > len(times_of_system_regime_changepoints):
        raise ValueError(
            f"You have requested to analyze the {which_changepoint_to_show}-th "
            f"system regime transition, but this does not exist."
        )

    _, J, K = np.shape(z_probs)
    if K != 2:
        raise NotImplementedError(f"K={K}, but we currently assume K=2")

    system_regime_changepoint_timestep = times_of_system_regime_changepoints[
        which_changepoint_to_show - 1
    ]
    lower_timestep, upper_timestep = (
        system_regime_changepoint_timestep - 10,
        system_regime_changepoint_timestep + 20,
    )
    for j in range(J):
        plt.plot(
            z_probs[lower_timestep:upper_timestep, j, which_entity_regime_to_show - 1],
            color=colors[j],
            label=f"Entity {j+1}",
        )

    plt.vlines(x=10, ymin=0, ymax=1, color="black")  # transition time.
    plt.title("Data generating process (figure 8's)")
    plt.ylabel(
        f"Prob of entity regime {which_entity_regime_to_show}"
    )  # TODO: need to extract entity regime programatically
    plt.xlabel(f"Timestep (relative to {lower_timestep})")
    plt.legend()
    plt.tight_layout()
    plt.show()
